# load_env.py  — build-time .env loader for PlatformIO (no extra packages needed)
# USED FROM AN ONLINE SOURCE

import os
import shlex
from SCons.Script import Import  # NOTE: capital S in SCons

Import("env")

PROJECT_DIR = env["PROJECT_DIR"]
ENV_PATH = os.path.join(PROJECT_DIR, ".env")
WRITE_HEADER = True                  # set False if you don't want the header
HEADER_PATH = os.path.join(PROJECT_DIR, "src", "secrets_autogen.h")


def debug(msg):
    print(f"[load_env.py] {msg}")


def parse_dotenv(path):
    """
    Minimal .env parser:
      - Ignores blank lines and lines starting with '#'
      - Supports KEY=VALUE (no export)
      - Trims surrounding quotes if present
      - Leaves inner quotes alone
    """
    data = {}
    if not os.path.exists(path):
        debug(f".env not found at {path}")
        return data

    with open(path, "r", encoding="utf-8") as f:
        for raw in f:
            line = raw.strip()
            if not line or line.startswith("#") or "=" not in line:
                continue
            k, v = line.split("=", 1)
            key = k.strip()
            val = v.strip()

            # remove one layer of surrounding quotes if present
            if (val.startswith('"') and val.endswith('"')) or (val.startswith("'") and val.endswith("'")):
                val = val[1:-1]

            data[key] = val
    return data


def define_str_macro(key, value):
    """
    Append a C/C++ define like -DKEY="value".
    We must escape quotes for the compiler command line.
    """
    escaped = value.replace('"', '\\"')
    env.Append(CPPDEFINES=[(key, f'\\"{escaped}\\"')])


def write_header_file(values):
    os.makedirs(os.path.dirname(HEADER_PATH), exist_ok=True)
    lines = ["// Auto-generated by load_env.py. Do NOT commit.",
             "#pragma once"]
    for k, v in values.items():
        # Use shlex.quote to keep weird strings safe in comments/logs; defines must be raw
        lines.append(f'#define {k} "{v}"')
    with open(HEADER_PATH, "w", encoding="utf-8") as f:
        f.write("\n".join(lines) + "\n")
    debug(f"Wrote header: {HEADER_PATH}")


# ---- Run ----
debug("Running…")
vars = parse_dotenv(ENV_PATH)
if vars:
    # Log keys only (not values) to avoid leaking secrets in build logs
    debug("Loaded keys: " + ", ".join(sorted(vars.keys())))
else:
    debug("No keys loaded from .env")

# Which keys to inject as strings:
STRING_KEYS = ["WIFI_SSID", "WIFI_PASS", "API_KEY"]

injected = {}
for key in STRING_KEYS:
    val = vars.get(key)
    if val is not None and val != "":
        define_str_macro(key, val)
        injected[key] = val
        debug(f"Injected macro: {key}")
    else:
        debug(f"Skipped undefined/empty: {key}")

# Optional header to make IntelliSense happy
if WRITE_HEADER and injected:
    write_header_file(injected)
    # Also add the header search path just in case
    env.Append(CPPPATH=[os.path.join(PROJECT_DIR, "src")])

debug("Done.")
